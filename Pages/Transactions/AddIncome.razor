@page "/income"
@page "/income/{Id:int}"
@layout MainLayout

@using BudgetBuddy.Models
@using BudgetBuddy.Data
@using BudgetBuddy.Models.ViewModels
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@inject IServiceProvider Services
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@attribute [Authorize]

<PageTitle>BudgetBuddy - Add Income</PageTitle>

<style>
    body { background-color: #f8f9fa !important; }

    .container-fluid { background-color: transparent !important; }

    .btn-income {
        background-color: #28a745;
        color: white;
        font-weight: 600;
        border-radius: 8px;
        padding: 0.5rem 1.5rem;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

    .btn-income:hover { background-color: #218838; transform: translateY(-2px); }
    .btn-income i { color: white; }

    .fw-bold { color: #000; }

    .page-header {
        background: white;
        border-radius: 12px;
        padding: 1.5rem 2rem;
        box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1),
                    0 2px 4px -1px rgba(0,0,0,0.06);
        border: 1px solid rgba(0,0,0,0.05);
        margin-bottom: 2rem;
    }

    .back-link {
        color: #6c757d;
        text-decoration: none;
        font-weight: 500;
        margin-bottom: 1rem;
        display: inline-block;
        transition: color 0.3s ease;
    }

    .back-link:hover { color: #495057; text-decoration: none; }

    .form-container {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
</style>

<div class="container-fluid px-4 py-4">
    <div class="page-header">
        <a class="back-link" href="/dashboard">
            <i class="fas fa-arrow-left"></i> Back to Dashboard
        </a>

        <h1 class="h3 mb-0 fw-bold">@pageTitle</h1>
        <p class="text-muted mb-0">@pageSubtitle</p>
    </div>

    <div class="form-container">
        @if (isLoadingUser)
        {
            <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status"></div>
                <div class="text-muted mt-2">Loading user...</div>
            </div>
        }
        else if (currentUser == null)
        {
            <div class="alert alert-warning text-center">
                <i class="fas fa-exclamation-triangle me-2"></i>
                Unable to load user. Please sign in again.
                <div class="mt-3">
                    <a href="/Account/Login" class="btn btn-primary">Go to Login</a>
                </div>
            </div>
        }
        else
        {
            <EditForm Model="vm" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <!-- Description -->
                <div class="mb-3">
                    <label class="form-label">Description</label>
                    <InputText class="form-control" @bind-Value="vm.Description" />
                    <ValidationMessage For="@(() => vm.Description)" class="text-danger small" />
                </div>

                <!-- Amount -->
                <div class="mb-3">
                    <label class="form-label">Amount</label>
                    <div class="input-group">
                        <span class="input-group-text">$</span>
                        <InputNumber class="form-control" @bind-Value="vm.Amount" step="0.01" />
                    </div>
                    <ValidationMessage For="@(() => vm.Amount)" class="text-danger small" />
                </div>

                <!-- Date -->
                <div class="mb-3">
                    <label class="form-label">Date</label>
                    <InputDate class="form-control" @bind-Value="vm.Date" />
                    <ValidationMessage For="@(() => vm.Date)" class="text-danger small" />
                </div>

                <!-- Category -->
                <div class="mb-3">
                    <label class="form-label">Category</label>
                    @if (categories == null || !categories.Any())
                    {
                        <div class="alert alert-info">No categories available.</div>
                        <select class="form-select" disabled>
                            <option value="">No categories</option>
                        </select>
                    }
                    else
                    {
                        <InputSelect class="form-select" @bind-Value="vm.CategoryId">
                            <option value="">Select category</option>
                            @foreach (var c in categories)
                            {
                                <option value="@c.Id">@c.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => vm.CategoryId)" class="text-danger small" />
                    }
                </div>

                <!-- Account -->
                <div class="mb-3">
                    <label class="form-label">Account</label>
                    @if (accounts == null || !accounts.Any())
                    {
                        <div class="alert alert-info">
                            No accounts yet.
                            <a class="btn btn-dark btn-sm ms-2 px-3" href="/accounts/create">
                                <i class="fas fa-plus me-1"></i>New Account
                            </a>
                        </div>
                        <select class="form-select" disabled>
                            <option value="">No accounts</option>
                        </select>
                    }
                    else
                    {
                        <InputSelect class="form-select" @bind-Value="vm.AccountId">
                            <option value="">Select account</option>
                            @foreach (var a in accounts)
                            {
                                <option value="@a.Id">@a.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => vm.AccountId)" class="text-danger small" />
                    }
                </div>

                <div class="d-flex gap-3 justify-content-end mt-3">
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    <button type="submit" class="btn btn-income">
                        <i class="fas @(isEdit ? "fa-edit" : "fa-plus") me-2"></i>
                        @(isEdit ? "Update Income" : "Add Income")
                    </button>
                </div>
            </EditForm>

            @if (errors.Any())
            {
                <div class="alert alert-danger mt-3">
                    <ul class="mb-0">
                        @foreach (var e in errors) { <li>@e</li>; }
                    </ul>
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                    <i class="fas fa-check-circle me-2"></i>@successMessage
                    <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter] public int? Id { get; set; }

    private AddIncomeViewModel vm = new();
    private User? currentUser;
    private List<Category>? categories;
    private List<Account>? accounts;
    private bool isLoadingUser = true;
    private bool isEdit = false;
    private List<string> errors = new();
    private string successMessage = string.Empty;
    private string pageTitle = "Add Income";
    private string pageSubtitle = "Create an income entry to track your earnings";

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        if (currentUser != null)
        {
            await LoadLists();
            if (Id.HasValue) await LoadExistingIncome(Id.Value);
        }

        isLoadingUser = false;
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            var authStateProvider = Services.GetService(typeof(AuthenticationStateProvider)) as AuthenticationStateProvider;
            var authState = await authStateProvider!.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                using var scope = Services.CreateScope();
                var userManager = scope.ServiceProvider.GetRequiredService<UserManager<User>>();
                currentUser = await userManager.GetUserAsync(user);
            }
            else
            {
                Navigation.NavigateTo("/Account/Login", true);
            }
        }
        catch (Exception ex)
        {
            errors.Add($"Error loading user: {ex.Message}");
        }
    }

    private async Task LoadLists()
    {
        try
        {
            using var scope = Services.CreateScope();
            var db = scope.ServiceProvider.GetRequiredService<FinancyContext>();

            // ✅ Categories are global — no user filtering
            categories = await db.Categories
                .OrderBy(c => c.Name)
                .ToListAsync();

            // ✅ Accounts remain user-specific
            accounts = await db.Accounts
                .Where(a => a.UserId == currentUser!.Id)
                .OrderBy(a => a.Name)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            errors.Add($"Error loading lists: {ex.Message}");
        }
    }

    private async Task LoadExistingIncome(int id)
    {
        try
        {
            using var scope = Services.CreateScope();
            var db = scope.ServiceProvider.GetRequiredService<FinancyContext>();
            var tx = await db.Transactions
                .Include(t => t.Category)
                .Include(t => t.Account)
                .FirstOrDefaultAsync(t => t.Id == id && t.IsIncome && t.UserId == currentUser!.Id);

            if (tx == null)
            {
                errors.Add("Transaction not found or you don't have access to edit it.");
                return;
            }

            isEdit = true;
            pageTitle = "Update Income";
            pageSubtitle = "Update an income entry to track your earnings";

            vm = new AddIncomeViewModel
            {
                Id = tx.Id,
                Description = tx.Description,
                Amount = tx.Amount,
                Date = tx.Date,
                CategoryId = tx.CategoryId,
                AccountId = tx.AccountId
            };
        }
        catch (Exception ex)
        {
            errors.Add($"Error loading income: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        errors.Clear();
        successMessage = string.Empty;

        if (currentUser == null)
        {
            errors.Add("User not found. Please login again.");
            return;
        }

        if (vm.Amount <= 0)
        {
            errors.Add("Amount must be greater than zero.");
            return;
        }

        try
        {
            using var scope = Services.CreateScope();
            var db = scope.ServiceProvider.GetRequiredService<FinancyContext>();

            if (isEdit && vm.Id > 0)
            {
                var tx = await db.Transactions.FirstOrDefaultAsync(t => t.Id == vm.Id && t.UserId == currentUser.Id && t.IsIncome);
                if (tx == null)
                {
                    errors.Add("Income not found or access denied.");
                    return;
                }

                tx.Description = vm.Description ?? string.Empty;
                tx.Amount = vm.Amount;
                tx.Date = vm.Date;
                tx.CategoryId = vm.CategoryId;
                tx.AccountId = vm.AccountId;

                db.Transactions.Update(tx);
                await db.SaveChangesAsync();

                successMessage = "Income updated successfully.";
                await Task.Delay(800);
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                var newTx = new Transaction
                {
                    Description = vm.Description ?? string.Empty,
                    Amount = vm.Amount,
                    Date = vm.Date == default ? DateTime.Now : vm.Date,
                    CategoryId = vm.CategoryId,
                    AccountId = vm.AccountId,
                    IsIncome = true,
                    UserId = currentUser.Id
                };

                db.Transactions.Add(newTx);
                await db.SaveChangesAsync();

                successMessage = "Income created successfully.";
                vm = new AddIncomeViewModel();
                await Task.Delay(800);
                Navigation.NavigateTo("/dashboard");
            }
        }
        catch (Exception ex)
        {
            errors.Add($"Error saving income: {ex.Message}");
        }
    }

    private void HandleInvalidSubmit() => errors.Add("Please fix the validation errors above.");

    private void Cancel() => Navigation.NavigateTo("/dashboard");
}
