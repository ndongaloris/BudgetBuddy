
@page "/accounts/edit/{Id:int}"
@layout MainLayout
@using BudgetBuddy.Models
@using BudgetBuddy.Models.ViewModels
@using BudgetBuddy.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject IServiceProvider Services
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit Account - BudgetBuddy</PageTitle>

<style>
    body { background-color: #f8f9fa !important; }

    .page-header {
        background: white;
        border-radius: 12px;
        padding: 1.5rem 2rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
                    0 2px 4px -1px rgba(0, 0, 0, 0.06);
        border: 1px solid rgba(0, 0, 0, 0.05);
        margin-bottom: 2rem;
    }

    .back-link {
        color: #6c757d;
        text-decoration: none;
        font-weight: 500;
        margin-bottom: 1rem;
        display: inline-block;
        transition: color 0.3s ease;
    }

    .back-link:hover { color: #495057; text-decoration: none; }

    .form-container {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .form-title { font-size: 1.25rem; font-weight: 600; margin-bottom: 0.5rem; color: #000; }
    .form-subtitle { color: #6c757d; margin-bottom: 1.5rem; }
</style>

<div class="container-fluid px-4 py-4">
    <div class="page-header">
        <a href="/accounts" class="back-link">
            <i class="fas fa-arrow-left"></i> Back to Accounts
        </a>
        <h1 class="h3 mb-0 fw-bold">Edit Account</h1>
        <p class="text-muted mb-0">Update details for your existing account</p>
    </div>

    <div class="form-container">
        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary mb-3" role="status"></div>
                <p class="text-muted">Loading account...</p>
            </div>
        }
        else if (currentUser == null)
        {
            <div class="alert alert-warning text-center">
                <i class="fas fa-exclamation-triangle me-2"></i>
                Unable to load user information. Please log in again.
                <div class="mt-3">
                    <a href="/Account/Login" class="btn btn-primary">Go to Login</a>
                </div>
            </div>
        }
        else if (accountModel == null)
        {
            <div class="alert alert-danger text-center">
                <i class="fas fa-times-circle me-2"></i> Account not found or access denied.
            </div>
        }
        else
        {
            <div class="form-title">Account Information</div>
            <div class="form-subtitle">Edit the fields below to update your account</div>

            <EditForm Model="accountModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" />

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Account Name</label>
                        <InputText @bind-Value="accountModel.Name" class="form-control" placeholder="Account Name" />
                        <ValidationMessage For="@(() => accountModel.Name)" class="text-danger small" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Account Type</label>
                        <InputSelect @bind-Value="accountModel.Type" class="form-select">
                            <option value="">Select account type</option>
                            <option value="Checking">Checking</option>
                            <option value="Savings">Savings</option>
                            <option value="Credit Card">Credit Card</option>
                            <option value="Investment">Investment</option>
                            <option value="Cash">Cash</option>
                            <option value="PayPal">PayPal</option>
                            <option value="Other">Other</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => accountModel.Type)" class="text-danger small" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Balance</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <InputNumber @bind-Value="accountModel.Balance" class="form-control" step="0.01" />
                        </div>
                        <ValidationMessage For="@(() => accountModel.Balance)" class="text-danger small" />
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                        <i class="fas fa-check-circle me-2"></i>
                        @successMessage
                        <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
                    </div>
                }

                @if (errors.Any())
                {
                    <div class="alert alert-danger mt-3">
                        <ul class="mb-0">
                            @foreach (var e in errors) { <li>@e</li> }
                        </ul>
                    </div>
                }

                <div class="d-flex gap-3 justify-content-end mt-4">
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    <button type="submit" class="btn btn-success" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                        }
                        <i class="fas fa-save me-2"></i>Save Changes
                    </button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }

    private AccountViewModel? accountModel;
    private User? currentUser;
    private List<string> errors = new();
    private string successMessage = "";
    private bool isLoading = true;
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        if (currentUser != null)
            await LoadAccount();
        isLoading = false;
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            var authStateProvider = Services.GetService(typeof(AuthenticationStateProvider)) as AuthenticationStateProvider;
            var authState = await authStateProvider!.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                using var scope = Services.CreateScope();
                var userManager = scope.ServiceProvider.GetRequiredService<UserManager<User>>();
                currentUser = await userManager.GetUserAsync(user);
            }
            else
            {
                Navigation.NavigateTo("/Account/Login", true);
            }
        }
        catch (Exception ex)
        {
            errors.Add($"Error loading user: {ex.Message}");
        }
    }

    private async Task LoadAccount()
    {
        try
        {
            using var scope = Services.CreateScope();
            var db = scope.ServiceProvider.GetRequiredService<FinancyContext>();
            var acc = await db.Accounts.FirstOrDefaultAsync(a => a.Id == Id && a.UserId == currentUser!.Id);

            if (acc == null)
            {
                errors.Add("Account not found or unauthorized access.");
                return;
            }

            accountModel = new AccountViewModel
            {
                Name = acc.Name,
                Type = acc.Type,
                Balance = acc.Balance
            };
        }
        catch (Exception ex)
        {
            errors.Add($"Error loading account: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (accountModel == null || currentUser == null) return;

        isSubmitting = true;
        errors.Clear();
        successMessage = "";

        try
        {
            using var scope = Services.CreateScope();
            var db = scope.ServiceProvider.GetRequiredService<FinancyContext>();
            var acc = await db.Accounts.FirstOrDefaultAsync(a => a.Id == Id && a.UserId == currentUser.Id);

            if (acc == null)
            {
                errors.Add("Account not found.");
                return;
            }

            acc.Name = accountModel.Name ?? "";
            acc.Type = accountModel.Type ?? "";
            acc.Balance = accountModel.Balance;

            db.Accounts.Update(acc);
            await db.SaveChangesAsync();

            successMessage = "Account updated successfully!";
            await Task.Delay(1500);
            Navigation.NavigateTo("/accounts");
        }
        catch (Exception ex)
        {
            errors.Add($"Error updating account: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void HandleInvalidSubmit()
    {
        errors.Add("Please fix the validation errors above.");
    }

    private void Cancel() => Navigation.NavigateTo("/accounts");
}
