
@page "/accounts/create"
@layout MainLayout
@using BudgetBuddy.Models
@using BudgetBuddy.Models.ViewModels
@using BudgetBuddy.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject IServiceProvider Services
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>BudgetBuddy - Add Account</PageTitle>

<style>
    .fw-bold {
        color: #000;
    }

    body {
        background-color: #f8f9fa !important;
    }
    
    .page-header {
        background: white;
        border-radius: 12px;
        padding: 1.5rem 2rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 
                    0 2px 4px -1px rgba(0, 0, 0, 0.06);
        border: 1px solid rgba(0, 0, 0, 0.05);
        margin-bottom: 2rem;
    }

    .back-link {
        color: #6c757d;
        text-decoration: none;
        font-weight: 500;
        margin-bottom: 1rem;
        display: inline-block;
        transition: color 0.3s ease;
    }

    .back-link:hover {
        color: #495057;
        text-decoration: none;
    }

    .form-container {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .form-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #000;
    }

    .form-subtitle {
        color: #6c757d;
        margin-bottom: 1.5rem;
    }
</style>


<div class="container-fluid px-4 py-4">
    <div class="page-header">
        <a href="/accounts" class="back-link">
            <i class="fas fa-arrow-left"></i>
            Back to Accounts
        </a>
        <h1 class="h3 mb-0 fw-bold">Add New Account</h1>
        <p class="text-muted mb-0">Create a new financial account to track your finances</p>
    </div>

    <div class="form-container">
        @if (isUserLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="text-muted">Loading user information...</p>
            </div>
        }
        else if (currentUser == null)
        {
            <div class="alert alert-warning text-center">
                <i class="fas fa-exclamation-triangle me-2"></i>
                Unable to load user information. Please try logging in again.
                <div class="mt-3">
                    <a href="/Account/Login" class="btn btn-primary">Go to Login</a>
                </div>
            </div>
        }
        else
        {
            <div class="form-title">Account Information</div>
            <div class="form-subtitle">Fill in the details below to add a new account</div>
            
            <EditForm Model="accountModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" />

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label" for="accountName">Account Name</label>
                        <InputText id="accountName" @bind-Value="accountModel.Name" class="form-control" placeholder="e.g., Chase Checking, PayPal, Cash" />
                        <ValidationMessage For="@(() => accountModel.Name)" class="text-danger small" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label" for="accountType">Account Type</label>
                        <InputSelect id="accountType" @bind-Value="accountModel.Type" class="form-select">
                            <option value="">Select account type</option>
                            <option value="Checking">Checking Account</option>
                            <option value="Savings">Savings Account</option>
                            <option value="Credit Card">Credit Card</option>
                            <option value="Investment">Investment Account</option>
                            <option value="Cash">Cash</option>
                            <option value="PayPal">PayPal</option>
                            <option value="Other">Other</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => accountModel.Type)" class="text-danger small" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label" for="accountBalance">Initial Balance</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <InputNumber id="accountBalance" @bind-Value="accountModel.Balance" class="form-control" placeholder="0.00" step="0.01" />
                        </div>
                        <ValidationMessage For="@(() => accountModel.Balance)" class="text-danger small" />
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                        <i class="fas fa-check-circle me-2"></i>
                        @successMessage
                        <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
                    </div>
                }

                @if (errors.Count > 0)
                {
                    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Please fix the following errors:
                        <ul class="mb-0 mt-2">
                            @foreach (var error in errors)
                            {
                                <li>@error</li>
                            }
                        </ul>
                        <button type="button" class="btn-close" @onclick="() => errors.Clear()"></button>
                    </div>
                }

                <div class="d-flex gap-3 justify-content-end mt-4">
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    <button type="submit" class="btn btn-success" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <div class="spinner-border spinner-border-sm me-2" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        else
                        {
                            <i class="fas fa-plus me-2"></i>
                        }
                        Add Account
                    </button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    private AccountViewModel accountModel = new();
    private string successMessage = string.Empty;
    private List<string> errors = new();
    private bool isLoading = false;
    private User? currentUser;
    private bool isUserLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        isUserLoading = false;
        StateHasChanged();
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            // Use the exact same approach as Dashboard
            var authStateProvider = Services.GetService(typeof(AuthenticationStateProvider)) as AuthenticationStateProvider;
            
            if (authStateProvider != null)
            {
                var authState = await authStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;

                Console.WriteLine($"Create Account - User authenticated: {user.Identity?.IsAuthenticated}");

                if (user.Identity?.IsAuthenticated == true)
                {
                    // Create scope for user lookup
                    using var scope = Services.CreateScope();
                    var userManager = scope.ServiceProvider.GetService(typeof(UserManager<User>)) as UserManager<User>;
                    
                    if (userManager != null)
                    {
                        currentUser = await userManager.GetUserAsync(user);
                        Console.WriteLine($"Create Account - User loaded: {currentUser?.FullName}");
                        
                        if (currentUser == null)
                        {
                            Console.WriteLine("Create Account - User is null after GetUserAsync");
                        }
                    }
                    else
                    {
                        Console.WriteLine("Create Account - UserManager is null");
                    }
                }
                else
                {
                    Console.WriteLine("Create Account - User not authenticated");
                    Navigation.NavigateTo("/Account/Login", true);
                }
            }
            else
            {
                Console.WriteLine("Create Account - AuthStateProvider is null");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Create Account - Error: {ex.Message}");
            errors.Add($"Authentication error: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        isLoading = true;
        errors.Clear();
        successMessage = string.Empty;
        StateHasChanged();

        try
        {
            if (currentUser == null)
            {
                errors.Add("User not found. Please ensure you are logged in.");
                isLoading = false;
                StateHasChanged();
                return;
            }

            // Create a new scope for database operation
            using var scope = Services.CreateScope();
            var dbContext = scope.ServiceProvider.GetService(typeof(FinancyContext)) as FinancyContext;
            
            if (dbContext == null)
            {
                errors.Add("Database connection error. Please try again.");
                isLoading = false;
                StateHasChanged();
                return;
            }

            // Create new account
            var account = new Account
            {
                Name = accountModel.Name?.Trim() ?? string.Empty,
                Type = accountModel.Type?.Trim() ?? string.Empty,
                Balance = accountModel.Balance,
                UserId = currentUser.Id
            };

            dbContext.Accounts.Add(account);
            await dbContext.SaveChangesAsync();

            successMessage = "Account created successfully!";
            
            // Reset form
            accountModel = new AccountViewModel();
            
            // Redirect after success
            await Task.Delay(2000);
            Navigation.NavigateTo("/accounts");
        }
        catch (Exception ex)
        {
            errors.Add($"Error creating account: {ex.Message}");
            Console.WriteLine($"Create Account - Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void HandleInvalidSubmit()
    {
        errors.Add("Please fix the validation errors above.");
        StateHasChanged();
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/accounts");
    }
}